5.1
    变量含义：
        $$： 产生式左部的值 
        $i： i为正整数，这个表示产生式右部第i个符号的值
        @$： 产生式左部的位置，只有在开启locations选项后才有效，由bison提供
        @i： 产生式右部第i个符号的位置
    AST结构与构建过程：
        其为树型结构（废话），对于产生式input -> empty | input line ，其在处理所有程序之前先由一空产生式规约而成（bison的约定），在此时新建一个叫做root的inputnode的对象，之后每次碰到一个新的line时就将其append到root中的vector里，而这个新的line又是由line的产生式的语义动作生成，在此可以直接利用$2来直接引用，对于line的产生，其要不为NULL，要不由asgn表达式的astnode进行生成，asgn也是如此，直至到达最基本的节点即数字和变量节点，将其规约为exp后即作为其上节点的孩子，注意到节点的产生都是在某个产生式进行规约的时候，也就是说AST的生成是从最底层的节点开始生成，其作为其上的节点的孩子不断向上构建AST，直至最后构建到根节点
        input的产生式追加一个空产生式就是为了创建根节点，还有就是输入可能为空（但这样也没有构建AST的意义），也可以像之前书本中的加一个新的产生式产生line，并在其后创建根节点
5.2
    创建节点的时机与信息填充时机：
        在5.1中也提到一点，创建一般在产生式规约的时候进行，但对于像多个表达式或者多个声明的情况，一个产生式要使用多次，显然不能每次都创建一个节点，于是我在那个产生式产生一个的那个选项时进行创建，并将该节点加入其中，并在另一个选项中把那些节点加到父节点之中的链表里，例如block中可能有多个blockitem，在我的文法中，
        block -> {multiblockitem} | {}; 
        multiblockitem -> blockitem | multiblockitem blockitem
        在第二个产生式的遇到第一个选项时，我创建一个block节点，并将blockitem填入其中，遇到第二个产生式时直接将后面的blockitem加入其中即可，由此避免了重复创建
        其他的也基本在规约时创建就好，只要对这种产生式特殊处理即可
        
        
代码设计思路：
    我使用c语言进行编写，所以定义的是结构体而不是类，每种节点定义对应的dumpdot函数，创建函数和销毁函数
    我创建了一个大的结构体ASTNode,其中用一个枚举类型作为其类型，一个union对应各种node，最后还加上了位置信息
    对于每种节点，我创建了对应的结构体，并将其包含在ASTNode中
    我也实现了一个非常简易的符号表，但是没有考虑变量的作用域和const类型，这个在p6中在进行完善，因为变量只有3种，一个是普通的变量，一个是数组，最后一个是函数，我对每个都创建了一个结构体，保存相应的信息。然后利用一个哈希函数将每个变量映射到不同的bucket中，每个bucket是一个链表所有的变量都存在一个表中，通过在entry中的类型来判断每个变量的类型，为了保存经过初始化的变量的初始化值，我将初始化的使用的exp的ASTNode也挂在其中，但这样会造成AST free掉之后释放其内存出错，这我是通过在释放时将对应的指针设为NULL解决的，因为有的ASTNode保存的就是符号表里的某个entry，由于实现了这样的符号表，我的程序会报出变量未声明就使用的错误，但遇到这种错误时依然继续分析并产生AST，不释放AST内存,在最后将错误报出
    对于AST,遇到对应的产生式基本上就创建一个节点，除了在5.2中说的那些特殊情况，反正总体上感觉比较自然，与产生式对应
    对于dump函数，也是类似,先创建一个新的节点，然后对每个孩子调用对应的dump函数，最后将这个节点根所有的孩子连起来即可，由于是c语言实现，我将模板中的类改为结构体，保存对应的文件指针和已经写入的节点数量，并将其作为每个dump函数的参数
    对于销毁函数，我利用了bison-example中实现的一个list,基本上将每个节点加入其中，最后调用销毁list的函数，将我自己实现的destroyAST函数作为参数传入，其会遍历链表，将每个节点销毁掉
    跟课上讲的一样，我设置了一个flag，在每次新建一个node的时候都会判断，遇到错误后将其置为true，故之后就不会有AST生成了
    对于多行注释的支持，我直接参考了标准c中的代码，并在那个函数中自己维护位置列号        
