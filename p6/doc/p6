一、一开始先吃掉"if"，然后创建一个名为ifScope的ParseScope的对象，作为当前if表达式中的scope，接着处理条件表达式，其是通过调用ParseParenExprOrCondition函数实现的，接着其创建一个InnerScope对象，之后调用ParseStatement处理if之后的then语句块，以其的返回值创建一个then语句的对应对象，之后便退出innerscope，接着处理else语句，其是通过下一个token是否为else来决定是否需要处理，从而可以使else总是和最近的if组合，解决了之前课堂里讲到的二义性问题，然后在else语句块中也创建一个innerscope，调用ParseStatement函数处理其中的语句块，最后如果then或者else语句块为空的话就加上一个空语句，并调用ActOnIfStmt将其组合为一个完整的if语句

错误处理手段：
1.在第1068到1072行，如果if后跟的不是小括号，则用diag输出一个错误信息然后跳过这个block的代码，返回错误信息
2.在处理条件语句如果返回出错时，其直接返回错误
3.在处理then语句时如果遇到code结束的标志就调用一个CodeCompleteAfterIf告知当前的scope，并且停止parse返回错误
4.在处理完then和else语句后如果两者都为invalid或者一者invalid一者为空则返回错误

在clang中其是通过创建一个parseScope的对象来完成进入某个scope的目的，即其在创建的时候会调用enterscope函数从而实现改变当前scope，在需要退出时调用exit其会更改当前的scope
whilescope与innerscope区别：在生成whilescope时其传入的flag为breakscope与continuescope的或，而innerscope传入的为declscope，其指代了while语句块的内容，而whilescope包含条件语句
在exit之中可以看出其调用exitscope,其会popscope，并且将原scope的parent赋值给当前的scope并且在当前cache的scope等于cache的size的时候才会删除scope，否则只是在cache中增加一个scope而已。同理在创建的时候其会取cache顶端的一个无效scope重新初始化，只有cache为空的时候才会重新创建一个新的scope对象，从而减少了new和delete的频率

二、处理二元运算表达式优先级以及结合性
    这个主要体现在ParseExpression和ParseRHSOfBinaryExpression之中，首先对于一个将要处理的表达式，其先调用ParseAssignmentExpression来产生一个左部表达式，其实就是调用处理单目运算符表达式的ParseCastExpression函数产生左部然后以赋值运算符的优先级调用ParseRHSOfBinaryExpression,然后将其作为参数调用ParseRHSOfBinaryExpression,在后者中主要其对调用getBinOpPrecedence函数返回每个运算符对应的token的优先级，然后在OperatorPrecedence.h之中定义了乙一系列token所对应的优先级基本上涵盖了c语言之中的所有运算符，其优先级由高到低依次递减，在处理完两个运算符之间的表达式后，其会保存当前运算符的优先级，然后获取下一个token的优先级，比较两者的优先级大小，如果后者比较大则递归调用ParseRHSOfBinaryExpression，优先处理后面的表达式，最后调用ActOnBinOp将两者组合成一个新的表达式并赋值给LHS。以上所有动作都在一个while(1)的死循环中完成，直到遇到逗号或者省略号或者下一个运算符的优先级小于参数中所期望的最小优先级时，返回LHS,或者在某处出错返回，对于运算符的结合性，其默认的结合性是左结合，只有当遇到‘？’和赋值符号(包括有运算的赋值)，设置一个名为isRightAssoc的flag，从而使得若当前优先级与下一个运算符的优先级相等且当前的运算符为右结合的话也递归调用自己处理当前op之后的表达式，这是显然的，因为赋值运算期待将后面的表达式处理的越多越好，同时注意到其在递归调用时将minprec所对应的形参在当前运算符的基础上加上了！isRightAssoc，即在为右结合时其期望处理其后所有优先级大于赋值运算符的表达式，而默认的运算符为左结合，显然从左到右的优先级要加上1.
三、
README.txt:
    其一个checker实际上记录可能的执行路径，通过将程序的状态和当前位置的封装，其可以抽象为一个叫做control-flow graph的东西，然后在其上面跑一个可达性分析的程序，当遇到分支语句时其也会产生两个分支，并在程序中做会记录相应的限制，如果这些限制无法满足就认为这些代码是不可达的，同时通过caching减少了内存但同时也可能复用先前的node从而使得这个图不是一个有向无环图，单个的checker通过engine提供的接口来实现对程序的分析。

fib.c的输出如下：
fib(5)
 fib(i - 1)             // 调用fib(4)
  fib(i - 1)            // 调用fib(3)
   fib(i - 1)           // 调用fib(2)
   Returning 1 S32b    // 返回1
   fib(i - 2)          // 调用fib(1)
   Returning 1 S32b    // 返回1
  Returning 2 S32b     // fib(3)返回2
  fib(i - 2)           // 调用fib(2)
  Returning 1 S32b     // 返回1
 Returning 3 S32b      // fib(4)返回3
 fib(i - 2)            // 调用fib(3)
  fib(i - 1)           // 调用fib(2)
  Returning 1 S32b     // 返回1
  fib(i - 2)           // 调用fib(1)
  Returning 1 S32b     // 返回1
 Returning 2 S32b      // fib(3)返回2
Returning 5 S32b       // fib(5)返回5



UnreachableCodeChecker.cpp原理：
    起主要是对产生的CFG进行遍历，将所有可达的block加入到reachable中，检查遍历后是否仍有没有被cover的block，如果有就报告出诊断错误，该语句出现在最后，若某一block被cover或者其他一些条件成立，则可以通过continue进入下一循环，其中寻找不可达block的入口时通过一个叫FindUnreachableEntryPoints的函数实现的，其通过递归遍历实现
    我写的程序中有一个不可达的default语句，因为checker不对其进行检查，所以没有报出来
    
    
checker的加载以及运行：    
    在main函数中，首先对命令参数进行处理，然后通过CHECK宏将插件对应的源文件导入，通过查找Checkers.inc文件找到对应的checker，例如DumpCalls对应的文件为TraversalChecker.cpp, 以及其对应的checkerarray为67，另一个类似，在此略去不表
    然后创建一个ClangCheckActionFactory的对象和其对应的指针FrontendFactory，接着根据参数类型来创建对应的对象最后调用tool.run函数，然后就是一路调用依次为
    1.在ClangTool.run中，对每个文件进行分别处理，每次处理先进入其路径然后调用ToolInvocation.run处理,结束后返回原来路径
    2.在ToolInvocation.run中，其进行一大堆预处理然后调用runInvocation
    3.在runInvocation中，其调用了FrontendActionFactory继承自ToolAction的runInnvocation函数
    4.在FrontendActionFactory.runInnvocation中，其创建了一个CompilerInstance，然后调用ExecuteAction
    5.在CompilerInstance.ExecuteAction中，其调用了FrontendAction的Execute
    6.其调用了ExecuteAction，其为一个纯虚函数是由给定的插件来实现的。
    
main函数的说明：
    其先进行一大堆的初始化以及各种参数的处理，然后调用ParseProgName来处理输入的命令，其调用FindDriverSuffix函数来更爱driver的mode，然后调用buildCompilation创建一些编译的对象，然后在之后调用ExecuteCompilation来进行编译，最后是handle一些未成功处理的编译选项和报出诊断信息

-cc1的处理：如果第一个参数即为-cc1，那么将MarkEOLs设置为false，然后其通过find_if来跳过第一个非空串之前由空串组成的参数，直至遇到第一个有意义的参数，若其为-cc1，然后根据MarkEOLs的值来决定是否需要移除参数列表中的空串，然后调用ExecuteCC1Tool函数来对-cc1的选项进行处理，其通过参数选择调用的是cc1_main还是cc1as_main, 并以其的返回值作为main函数的返回值
    
bonus2：
    其首先将定义了一个类为RefState，其封装了每个引用的状态，例如kind,所在的语句等
    然后封装了一个ReallocPair的结构体，表示由realloc产生的symbol
    接着是一个继承自Checker的一个名为MallocChecker的类，其是这个文件的主要部分，其定义了一大堆的接口函数，用来检查各种情况下的内存分配情况以及报出内存泄露的信息，在其中也定义了一个叫做MallocBugVisitor的类
    其对内存分配的监视主要是通过一些check函数实现的，例如checkPostStmt等，其会根据不同情况调用不同的函数，从而达到检测目的，这些也是其对外可以使用的接口，被定义为public，将诊断内容输出的函数是printState
    对于一些辅助函数，
        首先是对内存操作函数的识别函数，即is开头的那些，这奠定了分析的基础
        接着就是那些对应与具体内存操作的函数
        例如freeMemAux，其主要目的在于为提供free之后mem的状态，
        其还定义了对malloc，free等函数调用以及其返回值追踪的函数，来check每次调用是否出错等
        对于类MallocBugVisitor，其主要目的是对某个node的状态进行检查
        最后还有一大堆report函数报告对应的问题
